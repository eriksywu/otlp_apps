version: '3.8'

services:
  # Main TestApp service
  testapp:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: testapp:latest
    container_name: otlp-testapp
    ports:
      - "8080:8080"
    environment:
      # Application configuration
      - PORT=8080
      - MAX_LATENCY_MS=5000
      
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=testapp
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=testapp,service.version=1.0.0,deployment.environment=local
      
      # OTLP exporter configuration - points to local collector
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_TRACES_EXPORTER=otlp
      
      # Additional OpenTelemetry settings
      - OTEL_INSTRUMENTATION_HTTP_CLIENT_ENABLED=true
      - OTEL_INSTRUMENTATION_HTTP_SERVER_ENABLED=true
      - OTEL_INSTRUMENTATION_RUNTIME_METRICS_ENABLED=true
      - OTEL_METRIC_EXPORT_INTERVAL=5000
      
      # JVM settings for development
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0 -Xlog:gc:gc.log
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    depends_on:
      otel-collector:
        condition: service_healthy
    networks:
      - otlp-network

  # OpenTelemetry Collector for local testing
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - otlp-network

  # Jaeger for trace visualization
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - otlp-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - otlp-network

  # Load generator for testing
  load-generator:
    image: curlimages/curl:8.4.0
    container_name: load-generator
    depends_on:
      testapp:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Starting load generation...';
        while true; do
          curl -s -w 'Status: %{http_code}, Time: %{time_total}s\n' http://testapp:8080/api/test || echo 'Request failed';
          sleep 2;
        done
      "
    restart: unless-stopped
    networks:
      - otlp-network
    profiles:
      - load-test

networks:
  otlp-network:
    driver: bridge
    name: otlp-network